name: Build Tests

on:
  workflow_call:
  workflow_dispatch:
  merge_group:

jobs:
  run-tests:
    runs-on: ["n150"]
    env:
      ARCH_NAME: wormhole_b0
      TT_METAL_HOME: ${{ github.workspace }}/3rd_party/tt-metal
      PYTHONPATH: ${{ github.workspace }}/3rd_party/tt-metal
    steps:
      - name: Setup Telemetry
        uses: catchpoint/workflow-telemetry-action@v2
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true
      - name: LFS pull
        run: |
          git submodule foreach --recursive git lfs pull
      - name: Get submodule commit hash
        id: submodule-commit
        run: |
          commit=$(git -C 3rd_party/tt-metal rev-parse HEAD)
          echo "Submodule commit hash: $commit"
          echo "commit=$commit" >> $GITHUB_OUTPUT

      - name: Restore Metal Build Cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: 
            ${{ env.TT_METAL_HOME }}/build_Release
            ${{ env.TT_METAL_HOME }}/build
          key: metal-build-${{ steps.submodule-commit.outputs.commit }}
      
      - name: Build Metal
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          cd 3rd_party/tt-metal
          ./build_metal.sh -b Release
          cd ../../

      - name: Verify Metal Build Directories
        run: |
          ls -la ${{ env.TT_METAL_HOME }}
          ls -la ${{ env.TT_METAL_HOME }}/build_Release
          ls -la ${{ env.TT_METAL_HOME }}/build
      
      # See https://github.com/marketplace/actions/cache#cache-limits
      - name: Update Metal Build Cache
        if: steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path:
            ${{ env.TT_METAL_HOME }}/build_Release
            ${{ env.TT_METAL_HOME }}/build
          key: metal-build-${{ steps.submodule-commit.outputs.commit }}
          
      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -B build -GNinja
          cmake --build build --config Release --clean-first
      - name: Test
        run: |
          cd build
          ctest --no-tests=error --output-on-failure

  # Status check requires job with exact same name
  # This approach allows to further extend this workflow to allow for a multijob run
  validate-pr:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [run-tests]
    steps:
      - run: |
          test_result="${{ needs.run-tests.result}}"
          if [[ $test_result == "success" ]] ; then
            exit 0
          else
            exit 1
          fi
